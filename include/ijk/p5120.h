#ifndef _IJK_p5119_H_
#define _IJK_p5119_H_

#ifdef _MONT_C_CODE_
// The list of the bitlength of each SOP
static uint64_t bL[] =	{
	  2,  3,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	
	 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13
	};
#endif

#ifdef _ISOG_H_

// The list of Small Odd Primes (SOPs) is stored such that l_0 < l_1 < ... < l_{n-1}
static uint64_t L[] =	{
	  3,  7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,
	1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,
	2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,4133
	};

#ifndef _C_CODE_
// Sizes for the sets I, J, and K required in the new velusqrt formulae
static int sizeI[] =	{
	  0,  1,  2,  3,  2,  2,  2,  3,  3,  4,  3,  5,  5,  4,  4,  5,  4,  4,  4,  4,  5,  5,  6,  6,  6,  6,  6,  7,  6,  6,  6,  6,  6,  6,  6,  8,  8,  7,  7,  7,  7,  8,  8,  8,  7,  9,  8,  8,  8,  8, 10, 10,  8,  8,  8,  8,  8,  8, 10,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 11, 11, 11, 13, 13, 13, 12, 12, 11, 11, 14, 14, 14, 14, 13, 12, 11, 11, 11, 14, 13, 13, 13, 17, 17, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 14, 14, 13, 13, 13, 13, 13, 13, 15, 14, 14, 14, 14, 14, 14, 14, 15, 14, 14, 14, 14, 14, 14, 16, 16, 14, 14, 14, 14, 17, 17, 17, 17, 16, 15, 15, 15, 15, 18, 18, 18, 17, 15, 15, 19, 19, 18, 18, 18, 17, 16, 16, 16, 16, 19, 19, 18, 18, 18,
	 17, 16, 16, 16, 16, 16, 16, 16, 19, 18, 17, 17, 17, 17, 17, 17, 17, 17, 19, 18, 18, 18, 18, 18, 18, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 21, 21, 21, 21, 21, 21, 21, 21, 23, 23, 23, 23, 23, 22, 22, 21, 21, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 22, 22, 22, 29, 24, 23, 23, 23, 23, 21, 21, 21, 21, 21, 21, 27, 27, 27, 23, 23, 22, 22, 22, 22, 28, 25, 25, 24, 23, 22, 22, 22, 26, 26, 26, 26, 25, 25, 25, 24, 23, 22, 22, 22, 26, 26, 26, 26, 26, 25, 25, 25, 23, 23, 23, 27, 27, 27, 26, 26, 26, 26, 26, 26, 26, 23, 23, 23, 23, 23, 23, 27, 27, 25, 25, 25, 25, 25, 25, 28, 28, 28, 27, 27, 27, 27,
	 26, 26, 24, 24, 24, 24, 24, 24, 24, 28, 28, 27, 27, 27, 27, 26, 26, 25, 25, 25, 25, 25, 25, 25, 28, 28, 28, 26, 26, 26, 26, 26, 26, 26, 29, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 29, 29, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 30, 30, 29, 29, 29, 29, 29, 27, 27, 27, 27, 27, 31, 31, 31, 30, 30, 30, 30, 28, 27, 27, 27, 27, 27, 27, 27, 31, 30, 30, 29, 29, 28, 28, 28, 28, 28, 32, 32, 32, 31, 31, 30, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 31, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 31, 30, 30, 30, 30, 30, 30, 30, 33, 33, 36, 36, 36, 36, 36, 30, 30, 30, 30, 30, 30, 30, 34, 34, 34, 37, 37, 37, 37, 37, 32, 30, 30, 32
	};
static int sizeJ[] =	{
	  0,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  2,  2,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  6,  7,  7,  7,  7,  6,  6,  8,  8,  8,  8,  8,  8,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  8,  8,  8,  9,  9, 10, 10,  8,  8,  8,  8,  9, 10, 11, 11, 11,  9, 10, 10, 10,  8,  8, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 11, 11, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 12, 12, 14, 14, 14, 14, 12, 12, 12, 12, 13, 14, 14, 14, 14, 12, 12, 12, 13, 15, 15, 12, 12, 13, 13, 13, 14, 15, 15, 15, 15, 13, 13, 14, 14, 14,
	 15, 16, 16, 16, 16, 16, 16, 16, 14, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 17, 17, 18, 18, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 14, 17, 18, 18, 18, 18, 20, 20, 20, 20, 20, 20, 16, 16, 16, 19, 19, 20, 20, 20, 20, 16, 18, 18, 19, 20, 21, 21, 21, 18, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 22, 19, 19, 19, 19, 19, 20, 20, 20, 22, 22, 22, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 23, 23, 23, 23, 23, 23, 20, 20, 22, 22, 22, 22, 22, 22, 20, 20, 20, 21, 21, 21, 21,
	 22, 22, 24, 24, 24, 24, 24, 24, 24, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 24, 24, 24, 22, 22, 22, 24, 24, 24, 24, 24, 24, 24, 22, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 24, 24, 24, 24, 24, 26, 26, 26, 26, 26, 23, 23, 23, 24, 24, 24, 24, 26, 27, 27, 27, 27, 27, 27, 27, 24, 25, 25, 26, 26, 27, 27, 27, 27, 27, 24, 24, 24, 25, 25, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 27, 28, 28, 28, 28, 28, 28, 28, 26, 26, 24, 24, 24, 24, 24, 29, 29, 29, 29, 29, 29, 29, 26, 26, 26, 24, 24, 24, 24, 24, 28, 30, 30, 32
	};
static int sizeK[] =	{
	  1,  1,  1,  0,  0,  1,  3,  2,  3,  2,  2,  1,  3,  2,  5,  0,  1,  3,  4,  7,  1,  4,  0,  2,  3,  5,  6,  0,  3,  5,  8,  9,  2,  3,  6,  1,  3,  2,  5,  6, 11,  0,  2,  3,  7,  3,  1,  2,  4,  7,  0,  5,  0,  3,  6,  7, 10, 12,  1,  2,  9, 11, 12, 14,  5,  8, 13, 14,  0,  3,  7, 10, 13, 15,  2,  0,  2,  6,  1,  2,  7,  0,  3,  1,  4,  4,  6,  7,  9,  5,  3,  3,  7,  9,  2,  0,  1, 10,  1,  6,  1,  4,  5,  0,  5,  8, 11, 12, 15, 18,  0,  1,  3,  8,  9, 11, 14, 17,  0,  0,  2,  5,  9, 14, 18, 23,  3,  2,  5,  7, 11, 14, 16,  0,  2,  1,  6, 12, 13,  2,  3,  5,  6,  3,  6,  8,  9, 11,  6,  8,  9,  1,  3,  5,  3,  8,  0,  2,  5,  0,  3,  5,  8, 11,  1,  4,  0,  2,  5,
	  0,  3,  4,  7, 12, 13, 18, 19,  2,  3,  1,  2,  4,  7, 10, 14, 17, 20,  5,  0,  5,  9, 14, 17, 20,  0,  6,  0,  3,  6,  7, 10, 16, 21, 30, 31,  1,  4,  5,  8, 10, 11, 13, 19, 20, 23,  8, 11, 14, 18, 27,  0,  7,  9,  0,  2,  5,  9, 11, 12, 15, 21,  4,  5,  7,  8, 10,  1,  7,  5,  9,  3,  6,  8, 11,  1,  3,  7,  9,  6,  8, 11, 12, 14, 17, 18,  1,  2,  0,  3,  5,  6,  6,  8,  9, 14, 20, 21,  2,  6,  9,  2,  5,  8, 11, 13, 14,  4,  5, 11,  3,  3,  6,  9, 11,  0,  2,  3,  8,  0,  3,  6,  5,  0,  6,  7, 18,  1,  5,  8, 10, 11,  1,  5,  8,  1,  2,  7,  0,  5,  8,  0,  1,  3,  4,  9, 15, 16,  6,  7, 10, 12, 13, 18,  0,  9,  1,  3,  6, 10, 18, 19,  1,  5, 13,  0,  2,  6,  9,
	  2,  4,  2,  3, 14, 17, 18, 21, 23,  2,  9,  0,  2,  3,  6,  0,  3,  5,  8, 11, 18, 20, 23, 29,  1,  4,  6,  3, 12, 17, 21, 23, 26, 27,  2,  1,  7,  0,  8, 12, 14, 20, 27, 32, 33, 35,  1,  4,  7,  9,  0,  2,  5,  9, 11, 12, 15, 20, 21, 26, 30, 32,  3,  8,  2,  3,  6,  8,  9,  5, 12, 14, 17, 21,  2,  4, 13,  3,  8, 11, 14,  2,  5, 11, 18, 20, 23, 26, 27, 11,  0,  5,  1,  3,  6,  8, 12, 18, 21,  3,  5,  8,  4,  9,  0,  0, 13, 15, 16, 22, 25, 27, 33, 36, 40, 42,  2,  1,  2,  4,  5, 11, 25, 26, 29, 32, 35, 37, 40, 41, 47, 49,  5,  0,  5,  6, 14, 15, 23, 26,  0,  8,  0,  2,  3,  5,  6,  5,  9, 15, 18, 23, 24, 26,  1,  2,  5,  2,  3,  9, 14, 15,  4,  3,  6, 18
	};
#endif

#define sI_max 37
#define sJ_max 32
#define sK_max 2067
#endif

#endif /* required framework for the #I, #J, and #K, which is used in new velusqrt fomurlae on CSIDH-5119 */
