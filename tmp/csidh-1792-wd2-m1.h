#ifndef _STRATEGIES_H_
#define _STRATEGIES_H_

// This script assumes the C-code implementation has the list of Small Odd Primes (SOPs) stored such that l_0 < l_1 < ... < l_{n-1}
// Recall, the strategies process from small SOPs to large SOPs.

// -----------------------------------------------------------------------------------------------------------------------------------
// Strategy number 0

static uint32_t L0[]  =	{
	138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100, 99, 98, 97, 96, 95, 94, 93, 92,
	 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45,
	 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1,  0
	};
static uint32_t W0[]  =	{
	206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,
	183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,
	160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139
	};
static uint32_t S0[]  =	{
	 90, 26, 10,  6,  4,  2,  1,  3,  2,  1,  5,  4,  3,  2,  1,  9,  8,  7,  6,  5,  4,  3,  2,  1, 17,  8,  7,  6,  5,  4,  3,  2,  1, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,
	  2,  1, 72, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1, 57, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1, 44, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,
	  1, 33, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1
	};


// -----------------------------------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------------------------------
#define NUMBER_OF_DIFFERENT_STRATEGIES  1

// L_STRATEGY[i] determines the small odd primes l_i per each strategy
static uint32_t *L_STRATEGY[NUMBER_OF_DIFFERENT_STRATEGIES] = {
	L0
	};

// W_STRATEGY[i] determines L \ L_STRATEGY[i]
static uint32_t *W_STRATEGY[NUMBER_OF_DIFFERENT_STRATEGIES] = {
	W0
	};

// S_STRATEGY[i] determines the optimal strategy for L_STRATEGY[i]
static uint32_t *S[NUMBER_OF_DIFFERENT_STRATEGIES] = {
	S0
	};

// Number of primes for each strategy
static uint32_t NUMBER_OF_PRIMES[] = {
	139
	};

// Number of rounds per each different strategy
static uint8_t ROUNDS[] = {
	  1
	};

// Maximum number of degree-(l_i) isogeny constructions
static uint8_t M[] =	{
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
	};

#endif /* required framework for the strategies to be used in CSIDH-1792 using OAYT-style */
